function obj = solve(obj)
% wrapper method to drive the reactorNet.py script



% main work: setup the options for the python script
% set the mechanism
mechanismFlag = [' -mech ',obj.reactor1.mechanism];

% set the moleFractures in the fuel and oxidizer reservoirs
% hope we have a complete set of mole OR mass fractions given
enough =[isempty(obj.reservoir1.moleFractions) isempty(obj.reservoir1.moleFractions)...
   isempty(obj.reservoir1.massFractions) isempty(obj.reservoir1.massFractions)];         
          
if sum(enough)<2
    error('reactorNet:solve:NoData',...
             'At least, you should provide the mass or mole fractions in the reservoirs.') 
end
% create the fractions flag
if isempty(obj.reservoir1.initialMoleFractions) 
    % we must have a massFraction...
    set(obj.reservoir1.gas,'Y',obj.reservoir1.initialMassFractions);
    fr = moleFractions(obj.reactor1.gas);
    obj.reservoir1.initialMoleFractions = obj.reservoir1.setInitialMoleFractions(...
        obj.reservoir1.getInitialSpecies,...
        fr(obj.reservoir1.getSpeciesIndexByName(obj.reservoir1.getInitialSpecies)));
elseif isempty(obj.reservoir2.initialMoleFractions)
    set(obj.reservoir2.gas,'Y',obj.reservoir2.initialMassFractions);
    fr = moleFractions(obj.reactor2.gas);
    obj.reservoir2.initialMoleFractions = obj.reservoir2.setInitialMoleFractions(...
        obj.reservoir2.getInitialSpecies,...
        fr(obj.reservoir2.getSpeciesIndexByName(obj.reservoir2.getInitialSpecies)));
else
    % everything is fine...
end
        
moleFractionsFlag = [' -Xfuel ',num2str(obj.reservoir1.initialMoleFractions),...
    ' -Xoxid ',num2str(obj.reservoir2.initialMoleFractions)];       
 
% set the pressure and the temperatures
% if obj.initialPressure is a scalar, than all pressures set to this value,
% otherwise it must be a struct with P1 and P2 fields. the same holds for
% the temperature
if isempty(obj.reservoir1.initialPressure)||isempty(obj.reservoir1.initialPressure)
    error('reactorNet:WrongDataFormat',...
        ['For use with reactorNet the initial pressures',...
            ' must be set in obj.reservoir1.initialPressure',...
            ' and  obj.reservoir2.initialPressure']);        
else    
    pressureFlag = [' -Pfuel ',num2str(obj.reservoir1.initialPressure),...
                    ' -Poxid ',num2str(obj.reservoir2.initialPressure)];
end


if isempty(obj.reservoir1.initialTemperature)||isempty(obj.reservoir1.initialTemperature)   
    error('reactorNet:WrongDataFormat',...
        ['For use with reactorNet the initial temperature',...
             ' must be set in obj.reservoir1.initialTemperature',...
             ' and  obj.reservoir2.initialTemperature']);        
else  
    temperatureFlag = [' -Tfuel ',num2str(obj.reservoir1.initialTemperature),...
                        ' -Toxid ',num2str(obj.reservoir2.initialTemperature),' '];
end

% the setting of the massflow controlers
if ~isnumeric(obj.massFlowControllers)||isempty(obj.massFlowControllers)||length(obj.massFlowControllers)~=5
    error('chemistry:reactorNet:WrongDataFormat',...
        'The massFlowControler must be an array of dimension [1 x 5]')
elseif obj.massFlowControllers(4)>(obj.massFlowControllers(1)+obj.massFlowControllers(2))
    error()
else
    flowControllerFlag = [' -mdot1 ',num2str(obj.massFlowControllers(1)),...
        ' -mdot2 ',num2str(obj.massFlowControllers(2)),...
        ' -mdot3 ',num2str(obj.massFlowControllers(3)),...
        ' -mdot4 ',num2str(obj.massFlowControllers(4)),...
        ' -mdot5 ',num2str(obj.massFlowControllers(5)),' '];
end

enough =[isempty(obj.reservoir1.simulationTime) isempty(obj.reservoir1.simulationTime)...
   isempty(obj.reservoir1.simulationTime) isempty(obj.reservoir1.simulationTime)];     

if sum(enough)<1
    error('reactorNet:solve:NoData',...
             'At least, you should provide one simulationTime intervall.') 
end
         
timesFlag = [' -t0 ',num2str(min([obj.reactor1.simulationTime,obj.reactor2.simulationTime])),...
        ' -t1 ',num2str(max([obj.reactor1.simulationTime,obj.reactor2.simulationTime]))];


options = [mechanismFlag,moleFractionsFlag,...
    pressureFlag,temperatureFlag,timesFlag,flowControllerFlag];

fprintf('reactorNet.py will be called with options flag ')
fprintf(options)
fprintf('\n')
pythonpath = '~/canteraPython/';

call = ['python ',pythonpath,'reactorNet.py ',options];

[status,result] = system(call);

if status > 0 
    fprintf('Error:reactorNet:SomethingWrong:Something may be wrong with the python script.\n')
    fprintf('reactorNet.py send the following message:\n ')
    fprintf(result)
    return
end
fprintf('reactorNet.py send the following message: ')
fprintf(result)


% currend directory
wd = cd;
cd(pythonpath)
% call data creator function
[times, P1, P2, X1, X2] = data;

[status,result]  = system('rm data.m');
if status > 0 
    fprintf('Error:reactorNet:SomethingWrong:Something may be wrong when removing the data function.\n')
    fprintf('reactorNet.py send the following message: \n')
    fprintf(result)
    return
end
% go back
cd(wd);
% [status,result] = system('rm data.m')

% write the data into the fields of the object


obj.reactor1 = obj.reactor1.setTimes(times);
obj.reactor2 = obj.reactor2.setTimes(times);
obj.reactor1 = obj.reactor1.setMoleFractions(X1);
obj.reactor2 = obj.reactor2.setMoleFractions(X2);



obj.reactor1 = obj.reactor1.setTemp(P1(1,:));
obj.reactor2 = obj.reactor2.setTemp(P2(1,:));

obj.reactor1 = obj.reactor1.setPres(P1(2,:));
obj.reactor2 = obj.reactor2.setPres(P2(2,:));

obj.reactor1 = obj.reactor1.setDens(P1(3,:));
obj.reactor2 = obj.reactor2.setDens(P2(3,:));

obj.reactor1  = obj.reactor1.setTimes(times);
obj.reactor2  = obj.reactor2.setTimes(times);




end
